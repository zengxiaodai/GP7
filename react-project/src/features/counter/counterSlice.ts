// createAsyncThunk() 用于封装异步action
// createSlice() 用于创建子reducer
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { RootState, AppThunk } from '../../app/store';

// 引入api方法
import { fetchCount } from './counterAPI';

// 定义一个CounterState接口
export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

// 可共享的子store可共享数据
const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// 创建一个有异步逻辑的action
// createAsyncThunk(type, (入参)=>payload)
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// createSlice() 创建子reducer
export const counterSlice = createSlice({
  // name 是子reducer的名称（子store的名字）
  name: 'counter',
  // 子store的共享数据
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // 用于封装同步的reducer逻辑
  reducers: {
    // 如何触发这个increment？ dispatch({type:'counter/increment', payload:''})
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      console.log('---action', action)
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // 用于封装异步的reducer逻辑（监听接口的异步状态）
  extraReducers: (builder) => {
    // do something
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
    }

});

// 从子reducer（slice对象）的actions中解构出所有的reducers
export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};
